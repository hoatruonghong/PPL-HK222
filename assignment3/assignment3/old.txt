from Visitor import Visitor
from StaticError import *
from AST import *


class MTType:
    def __init__(self, partype, rettype):
        self.partype = partype
        self.rettype = rettype

class Symbol:
    def __init__(self, name, mttype, value = None):
        self.name = name
        self.mttype = mttype
        self.value = value

# class MTType: pass
# class IntegerType(MTType): pass
# class FloatType(MTType): pass
# class StringType(MTType): pass
# class BooleanType(MTType): pass
# class ArrayType(MTType): pass
# class VoidType(MTType): pass

"""
a : integer = 1;   
foo : function integer(a: integer, b: string) {
    c = a;
}
main: function void () {
    b = 3;
}
b: float;

o = [[a, main]]


Vì cần check main nên phải đi qua ít nhất 2 lần
Thứ tự khai báo không quan trọng nên đi qua thêm lần nữa để hốt hết biến được khai báo

?? Thứ tự các lỗi nếu có nhiều lỗi trên một chương trình
?? Hàm cùng tên nhưng khác type được không? cùng tên cùng type nhưng khác params được không? 
Nếu được thì trường hợp cùng tên cùng tham số, nhưng cả hai đều kiểu auto suy diễn ra khác -.- hơi dô lý nhờ >,< => bỏ qua ik


"""

class StaticChecker(Visitor):
    def __init__(self, ast):
        self.ast = ast
        self.has_entry_point = False
    
    def check(self):
        return self.visit(self.ast, None)

    def visitProgram(self, ast, o): 
        # decls: List[Decl]
        o = [[]]
        for decl in ast.decls:
            o = self.visit(decl, o)
            #print("o1: ", o)
        # check main function exist
        if not self.has_entry_point:
            raise NoEntryPoint()
        
        return []

    def visitVarDecl(self, ast, o): 
        # name: str, typ: Type, init: Expr or None = None
        print(ast)
        if ast.name in o[0] : 
            raise Redeclared(Variable(),ast.name)
        if type(ast.typ) is AutoType:
            if not ast.init :
                raise Invalid(Variable(), ast.name)
            else:
                # suy diễn kiểu
                init_typ = self.visit(ast.init, o)               
                ast.typ = init_typ
        
        if ast.init: # có init => kiểm tra về tương thích kiểu
            init_typ = self.visit(ast.init, o)
            print(init_typ)
            if type(ast.typ) is FloatType and type(init_typ) is IntegerType:
                if type(ast.init) is IntegerLit :
                    ast.init = FloatLit(float(ast.init.val))
                
            elif type(ast.typ) is not type(init_typ):
                raise TypeMismatchInVardecl(ast)
        print(ast)
                
        o[0].append(ast.name)        
        return o
        
    def visitParamDecl(self, ast, o): 
    # name: str, typ: Type, out: bool = False, inherit: bool = False
        print("in param: ", o)
        if ast.name in o[0]:
            raise Redeclared(Parameter(), ast.name)
        
        o[0].append(ast.name)
        return o
    
    def visitFuncDecl(self, ast, o): 
    # name: str, return_type: Type, params: List[ParamDecl], inherit: str or None, body: BlockStmt
        if ast.name in o[0]:
            raise Redeclared(Function(),ast.name)
        if ast.name == "main" and type(ast.return_type) is VoidType and len(ast.params) == 0:
            self.has_entry_point = True
        
        o[0].append(ast.name)
#        print("o:",o)
        env = [[]] + o
#        print("env: ",env)
        for param in ast.params:
            env = self.visit(param, env)
        self.visit(ast.body, env)
        
        return o
    
    def visitAssignStmt(self, ast, o): pass
    def visitBlockStmt(self, ast, o): pass
    def visitIfStmt(self, ast, o): pass
    def visitForStmt(self, ast, o): pass
    def visitWhileStmt(self, ast, o): pass
    def visitDoWhileStmt(self, ast, o): pass
    def visitBreakStmt(self, ast, o): pass
    def visitContinueStmt(self, ast, o): pass
    def visitReturnStmt(self, ast, o): pass
    def visitCallStmt(self, ast, o): pass

    def visitBinExpr(self, ast, o): 
        #  op: str, left: Expr, right: Expr
        ltype = self.visit(ast.left, o)
        rtype = self.visit(ast.right, o)
        
        if ast.op in ['+','-','*','/']:
            if type(ltype) is IntegerType and type(rtype) is IntegerType:
                return IntegerType()
            if type(ltype) is FloatType or type(rtype) is FloatType:
                return FloatType()
            
            raise TypeMismatchInExpression(ast)
        
        if ast.op in ['%']:
            if not (type(ltype) is IntegerType and type(rtype) is IntegerType):
                raise TypeMismatchInExpression(ast)
            return IntegerType()
        
        if ast.op in ['&&', '||']:
            if type(ltype) is BooleanType and type(rtype) is BooleanType:
                return BooleanType()
            raise TypeMismatchInExpression(ast)
        
        if ast.op in ['::']:
            if type(ltype) is StringType and type(rtype) is StringType:
                return StringType()
            raise TypeMismatchInExpression(ast)
            
        if ast.op in ['==','!=']:
            if type(ltype) is IntegerType and type(rtype) is IntegerType:
                return BooleanType()
            elif type(ltype) is BooleanType and type(rtype) is BooleanType:
                return BooleanType()
            raise TypeMismatchInExpression(ast)
            
        if ast.op in ['>', '<', '<=','>=']:
            if type(ltype) is IntegerType and type(rtype) is IntegerType:
                return BooleanType()
            elif type(ltype) is FloatType and type(rtype) is FloatType:
                return BooleanType()
            raise TypeMismatchInExpression(ast)
            
    def visitUnExpr(self, ast, o): 
        # op: str, val: Expr
        valtyp = self.visit(ast.val, o)
        
        if ast.op == '-':
            if type(valtyp) in [IntegerType, FloatType]:
                return valtyp
            raise TypeMismatchInExpression(ast)
    
        if ast.op == '!':
            if type(valtyp) is BooleanType:
                return BooleanType()
            raise TypeMismatchInExpression(ast)
     
        
    def visitId(self, ast, o): 
        # name: str
        """ 
        typ = None
        for x in o:
            if x.name == ctx.name: 
                typ = x.typ
                break
        if not typ:
            raise UndeclaredIdentifier(ctx.name)
        return typ
        """
        typ = None
        print("id :", ast)
        for env in o:
            if ast.name in env:
                typ = ast.typ
                break
        if not typ :              
            raise Undeclared(Identifier(),ast.name)
        return typ
    
    def visitArrayCell(self, ast, o): pass
    
    
    
    def visitIntegerLit(self, ast, o): 
        return IntegerType()
    def visitFloatLit(self, ast, o): 
        return FloatType()
    def visitStringLit(self, ast, o): 
        return StringType()
    def visitBooleanLit(self, ast, o): 
        return BooleanType()
    def visitArrayLit(self, ast, o): 
        return ArrayType()
    def visitFuncCall(self, ast, o): pass

    def visitIntegerType(self, ast, o): 
        return IntegerType()
    def visitFloatType(self, ast, o): 
        return FloatType()
    def visitBooleanType(self, ast, o): 
        return BooleanType()
    def visitStringType(self, ast, o): 
        return StringType()
    def visitArrayType(self, ast, o): 
        return ArrayType()
    def visitAutoType(self, ast, o): pass
    def visitVoidType(self, ast, o): 
        return VoidType()

